<project name="ChromeExtensionPackage" default="package" basedir=".">
	<description>
		Package a google chrome extension and exclude private files that should never be published.
	</description>

	<!-- name of the final extension: name.crx -->
	<property name="extName" value="##EDIT##" />
	<property name="build" value=".build/" />
	<!-- directory where files will be copied and compiled. The extension will be created in the parent. buildDir will be deleted -->
	<property name="buildDir" value="${build}/${extName}" />
	<!-- Path to chrome's executable -->
	<property name="chromePath" value="C:\Users\##EDIT##\AppData\Local\Google\Chrome\Application\chrome.exe" />
	<!-- Path to the extension's files that were copied into the build path -->
	<property name="extPath" value="${basedir}\${buildDir}" />
	<!-- Path to the extension's certificate -->
	<property name="extCert" value="${basedir}\.cert\${extName}.pem" />

	<!-- updates.xml properties: see updates.template.xml -->
	<property name="extId" value="##EDIT##" />
	<property name="extCodebase" value="##EDIT##" /><!-- ex: http://www.example.com/path/to/${extName}.crx -->
	<property name="extVersion" value="##EDIT##" />
	<!-- end updates.xml properties -->

	<!-- Entry point target, executes the 'copy' target first -->
	<target name="package" depends="copy" description="Generates a chrome extension" if="build.execute">
		<exec executable="${chromePath}">
			<arg value="--pack-extension=${extPath}" />
			<arg value="--pack-extension-key=${extCert}" />
			<!-- suppress the chrome package success message -->
			<arg value="--no-message-box" />
		</exec>
		<antcall target="updates" />
		<antcall target="clean" />
	</target>

	<target name="copy" depends="verify" if="build.execute" description="copy required extension files to build directory. Exclude non-public src files and project files">
		<tstamp />
		<mkdir dir="${buildDir}" />

		<copy todir="${buildDir}" preservelastmodified="true">
			<fileset dir="${basedir}">
				<exclude name=".cert/" />
				<exclude name=".settings/" />
				<exclude name=".build/" />
				<exclude name="js-src/" />
				<exclude name="lib/" />
				<exclude name=".project" />
				<exclude name=".gitignore" />
				<exclude name="publish-extension-ant-build.xml" />
				<exclude name="updates.xml" />
			</fileset>
		</copy>
	</target>

	<target name="verify" description="Verify some configuration settings or fail with error">
		<condition property="build.execute">
			<and>
				<available file="${chromePath}" type="file"/>
			</and>
		</condition>
		<fail message="Verify the path to chrome.exe is correct" unless="build.execute"/>

		<condition property="configError">
			<or>
				<matches pattern="##EDIT##" string="${extName}" />
				<matches pattern="##EDIT##" string="${extId}" />
				<matches pattern="##EDIT##" string="${extCodebase}" />
				<matches pattern="##EDIT##" string="${extVersion}" />
			</or>
		</condition>
		<fail message="Verify all configuration fields have been updated. Check for ##EDIT## values." if="configError"/>
	</target>

	<target name="updates" description="create updates.xml" if="build.execute">
		<copy file="updates.template.xml" tofile="${build}/updates.xml" overwrite="true" force="true">
			<filterchain>
				<replacetokens>
					<token key="extension_id" value="${extId}" />
					<token key="extension_codebase" value="${extCodebase}" />
					<token key="extension_version" value="${extVersion}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="clean" description="clean up" if="build.execute">
		<delete dir="${buildDir}" />
	</target>
</project>
